{"remainingRequest":"C:\\Users\\Ibra\\Documents\\Workspace\\coin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Ibra\\Documents\\Workspace\\coin\\src\\views\\Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Ibra\\Documents\\Workspace\\coin\\src\\views\\Dashboard.vue","mtime":1545012358275},{"path":"C:\\Users\\Ibra\\Documents\\Workspace\\coin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Ibra\\Documents\\Workspace\\coin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Ibra\\Documents\\Workspace\\coin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Ibra\\Documents\\Workspace\\coin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nvar request = require(\"request\");\r\nvar users = [];\r\nvar blockChain;\r\nvar temp = [];\r\nvar currentUser;\r\nvar tempK;\r\n\r\nvar headers = [\r\n  {\r\n    text: \"Name\",\r\n    value: \"Name\"\r\n  },\r\n  {\r\n    text: \"Public Key\",\r\n    value: \"Public Key\"\r\n  },\r\n  {\r\n    text: \"Balance\",\r\n    value: \"Balance\"\r\n  }\r\n];\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      headers,\r\n      users,\r\n      blockChain,\r\n      privateKey: \"Your private key\",\r\n      currentBalance: 0,\r\n      currentUser,\r\n      recipient: \"Recipient's name\",\r\n\r\n      \r\n    };\r\n  },\r\n  methods: {\r\n    created(){\r\n      this.getBalance();\r\n    },\r\n    update() {\r\n      request.get(\"http://localhost:3000/users\", function(err, res, body) {\r\n        //console.log(body);\r\n        temp = body;\r\n      });\r\n      //console.log(users);\r\n      temp = JSON.parse(temp);\r\n      console.log(temp);\r\n      var s;\r\n      var y;\r\n      var t;\r\n      var m;\r\n      //users = users.userList.user;\r\n      var k = 0;\r\n      k = 0;\r\n      for (k in temp) {\r\n        s = temp[k].userName;\r\n        y = temp[k].userKey;\r\n        t = temp[k].balance;\r\n        console.log(t);\r\n        users.push({ name: s, key: y, balance: t });\r\n      }\r\n      \r\n    },\r\n    getBalance(){\r\n      request.get(\"http://localhost:3000/profile\", function(err, res, body) {\r\n        //console.log(JSON.parse(body));        \r\n        tempK = JSON.parse(body);\r\n        //console.log(temp);\r\n        this.$data.currentBalance = tempK.balance;\r\n        this.$data.currentUser = tempK.userName;\r\n\r\n      });\r\n      request.get(\"http://localhost:3000/profile\", function(err, res, body) {\r\n        //console.log(JSON.parse(body));        \r\n        tempK = JSON.parse(body);\r\n        console.log(temp);\r\n        this.$data.currentBalance = tempK.balance;\r\n        this.$data.currentUser = tempK.userName;\r\n\r\n      });\r\n      this.$data.currentBalance = tempK.balance;\r\n      this.$data.currentUser = tempK.userName;\r\n\r\n    },\r\n    Mine(){\r\n        var data = {\"name\": currentUser}\r\n        var options = {\r\n        uri: 'http://localhost:3000/mine',\r\n        method: 'POST',\r\n        json: data\r\n      }\r\n      //console.log(JSON.stringify(mainItems));\r\n      //console.log(JSON.stringify(jsData))\r\n      request(options, function(error, response, body){\r\n        if(!error && response.statusCode == 200){\r\n          //console.log(body);\r\n        }\r\n      })\r\n    },\r\n    Send(){\r\n      console.log(this.recipient + \"\\n\" + this.privateKey);\r\n        var data = {\"name\": this.recipient, \"key\": this.privateKey}\r\n        var options = {\r\n        uri: 'http://localhost:3000/send',\r\n        method: 'POST',\r\n        json: data\r\n      }\r\n      //console.log(JSON.stringify(mainItems));\r\n      //console.log(JSON.stringify(jsData))\r\n      request(options, function(error, response, body){\r\n        if(!error && response.statusCode == 200){\r\n          //console.log(body);\r\n        }\r\n      })\r\n    },\r\n    logout(){\r\n        request.get(\"http://localhost:3000/logout\", function(err, res, body) {\r\n      });\r\n      this.$router.push(\"/login\");\r\n    },\r\n    login(){\r\n      this.$router.push(\"/login\");\r\n    }\r\n  },\r\n  beforeMount() {\r\n    this.update();\r\n    this.getBalance();\r\n\r\n  }\r\n};\r\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Dashboard.vue","sourceRoot":"src\\views","sourcesContent":["<template>\r\n  <v-container fill-height fluid grid-list-xl>\r\n    <v-layout wrap>\r\n      <v-flex>\r\n        <template>\r\n          <v-card dark width=\"1000\">\r\n            <v-img\r\n              src=\"https://www.sciencenews.org/sites/default/files/2016/09/main/articles/090816_ls_brain-training_free.jpg\"\r\n              aspect-ratio=\"2.75\"\r\n            ></v-img>\r\n\r\n            <v-card-title primary-title>\r\n              <div>\r\n                <h3 class=\"headline mb-0\">Users</h3>\r\n              </div>\r\n            </v-card-title>\r\n            <v-data-table xs12 sm6 offset-sm3 :headers=\"headers\" :items=\"users\" @click=\"update\">\r\n              <template slot=\"items\" slot-scope=\"props\">\r\n                <td class=\"text-xs\">{{ props.item.userKey }}</td>\r\n                <v-tooltip bottom>\r\n                  <span slot=\"activator\">{{ props.header.text }}</span>\r\n                  <span>{{ props.header.value }}</span>\r\n                </v-tooltip>\r\n              </template>\r\n              <template slot=\"items\" slot-scope=\"props\">\r\n                <tr>\r\n                  <td class=\"text-xs\">{{ props.item.name }}</td>\r\n                  <td class=\"text-xs\">{{ props.item.key }}</td>\r\n                  <td class=\"text-xs\">{{ props.item.balance }}</td>\r\n                </tr>\r\n              </template>\r\n            </v-data-table>\r\n            <v-card-actions>\r\n              <v-btn large flat color=\"success\" @click=\"update()\">Show Data</v-btn>\r\n            </v-card-actions>\r\n          </v-card>\r\n          \r\n        </template>\r\n        \r\n      </v-flex>\r\n      <v-card dark width=\"710\" height=\"440\">\r\n            <v-card-title primary-title>\r\n              <div>\r\n                <h2 class=\"headline mb-0\">\r\n                  {{this.currentUser}}\r\n                </h2>\r\n                <h3 class=\"headline mb-0\">My Balance</h3>\r\n                <v-btn color=\"primary\" block large v-model=\"this.currentBalance\" icon round><v-icon large>mdi-atom</v-icon>{{this.currentBalance}}</v-btn>\r\n                <v-text-field width=\"500\" outline background-color=\"primary\"  v-model=\"recipient\" label=\"Please enter the receipient's name\" />\r\n                <v-text-field width=\"500\" outline background-color=\"primary\"  v-model=\"privateKey\" label=\"Please enter your private key\" />\r\n\r\n              </div>\r\n            </v-card-title>\r\n            <v-card-actions>\r\n              <v-btn large color=\"success\" round @click=\"Mine()\">Mine</v-btn>\r\n              <v-btn large color=\"success\" round @click=\"getBalance\">Update Balance</v-btn>\r\n            <v-btn large color=\"success\" round @click=\"Send()\">Send</v-btn>\r\n            <v-btn large color=\"primary\" round @click=\"logout\">Logout</v-btn>\r\n            <v-btn large color=\"primary\" round @click=\"login\">Login</v-btn>\r\n\r\n            </v-card-actions>\r\n\r\n          </v-card>\r\n      <v-flex md12 sm12 lg8></v-flex>\r\n      <template></template>\r\n    </v-layout>\r\n  </v-container>\r\n</template>\r\n      \r\n    </v-layout>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nvar request = require(\"request\");\r\nvar users = [];\r\nvar blockChain;\r\nvar temp = [];\r\nvar currentUser;\r\nvar tempK;\r\n\r\nvar headers = [\r\n  {\r\n    text: \"Name\",\r\n    value: \"Name\"\r\n  },\r\n  {\r\n    text: \"Public Key\",\r\n    value: \"Public Key\"\r\n  },\r\n  {\r\n    text: \"Balance\",\r\n    value: \"Balance\"\r\n  }\r\n];\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      headers,\r\n      users,\r\n      blockChain,\r\n      privateKey: \"Your private key\",\r\n      currentBalance: 0,\r\n      currentUser,\r\n      recipient: \"Recipient's name\",\r\n\r\n      \r\n    };\r\n  },\r\n  methods: {\r\n    created(){\r\n      this.getBalance();\r\n    },\r\n    update() {\r\n      request.get(\"http://localhost:3000/users\", function(err, res, body) {\r\n        //console.log(body);\r\n        temp = body;\r\n      });\r\n      //console.log(users);\r\n      temp = JSON.parse(temp);\r\n      console.log(temp);\r\n      var s;\r\n      var y;\r\n      var t;\r\n      var m;\r\n      //users = users.userList.user;\r\n      var k = 0;\r\n      k = 0;\r\n      for (k in temp) {\r\n        s = temp[k].userName;\r\n        y = temp[k].userKey;\r\n        t = temp[k].balance;\r\n        console.log(t);\r\n        users.push({ name: s, key: y, balance: t });\r\n      }\r\n      \r\n    },\r\n    getBalance(){\r\n      request.get(\"http://localhost:3000/profile\", function(err, res, body) {\r\n        //console.log(JSON.parse(body));        \r\n        tempK = JSON.parse(body);\r\n        //console.log(temp);\r\n        this.$data.currentBalance = tempK.balance;\r\n        this.$data.currentUser = tempK.userName;\r\n\r\n      });\r\n      request.get(\"http://localhost:3000/profile\", function(err, res, body) {\r\n        //console.log(JSON.parse(body));        \r\n        tempK = JSON.parse(body);\r\n        console.log(temp);\r\n        this.$data.currentBalance = tempK.balance;\r\n        this.$data.currentUser = tempK.userName;\r\n\r\n      });\r\n      this.$data.currentBalance = tempK.balance;\r\n      this.$data.currentUser = tempK.userName;\r\n\r\n    },\r\n    Mine(){\r\n        var data = {\"name\": currentUser}\r\n        var options = {\r\n        uri: 'http://localhost:3000/mine',\r\n        method: 'POST',\r\n        json: data\r\n      }\r\n      //console.log(JSON.stringify(mainItems));\r\n      //console.log(JSON.stringify(jsData))\r\n      request(options, function(error, response, body){\r\n        if(!error && response.statusCode == 200){\r\n          //console.log(body);\r\n        }\r\n      })\r\n    },\r\n    Send(){\r\n      console.log(this.recipient + \"\\n\" + this.privateKey);\r\n        var data = {\"name\": this.recipient, \"key\": this.privateKey}\r\n        var options = {\r\n        uri: 'http://localhost:3000/send',\r\n        method: 'POST',\r\n        json: data\r\n      }\r\n      //console.log(JSON.stringify(mainItems));\r\n      //console.log(JSON.stringify(jsData))\r\n      request(options, function(error, response, body){\r\n        if(!error && response.statusCode == 200){\r\n          //console.log(body);\r\n        }\r\n      })\r\n    },\r\n    logout(){\r\n        request.get(\"http://localhost:3000/logout\", function(err, res, body) {\r\n      });\r\n      this.$router.push(\"/login\");\r\n    },\r\n    login(){\r\n      this.$router.push(\"/login\");\r\n    }\r\n  },\r\n  beforeMount() {\r\n    this.update();\r\n    this.getBalance();\r\n\r\n  }\r\n};\r\n</script>\r\n"]}]}